---
- name: Launch a Compute Resource via Satellite 6
  hosts: satellite*
  gather_facts: no
  vars_files:
    - group_vars/satellite.yml
  vars:
    dns_domain: "dev.maskedadmins.com"
    sat6_org: "{{ sat6_default_org }}"
    sat6_location: "{{ sat6_default_location }}"
    sat6_hostgroup: "RHEL_7_x86_64_Hostgroup for dev.maskedadmins.com RedHat 7.3"
    aws_resource: "Not Configured"
    rhev_resource: "Not Configured"
    osp8_resource: "OSP8 Redhat Lab"
    osp10_resource: "OSP10 Redhat Lab"
    operatingsystem: "RedHat 7.3"
    vmname: "test vm"
    vmimage: "test image"
    vmrootpassword: "{{ ipmi_pass }}"
    tower_server: 10.55.102.248
    tower_key: dc7c0b52cd29cacceb8d3571257801ea
    vmmetadata:
      - name: host_type
        value: "whatever you want"
  tasks:
    - name: "Set fact for Normal Boot Script"
      set_fact:
        tower_jobid: "287"
      when: jobname == "normal"

    - name: "Set fact for Openshift Container Platform Node"
      set_fact:
        tower_jobid: "227"
      when: jobname == "ocp"

    - name: "Set fact for JBOSS"
      set_fact:
        tower_jobid: "3654"
      when: jobname == "jboss"

    - name: "Set fact for Openstack Node"
      set_fact:
        tower_jobid: "256"
      when: jobname == "osp"

    - name: "Set fact for Cloudforms Engine"
      set_fact:
        tower_jobid: "721"
      when: jobname == "cfme"

    - name: "Set fact for Satellite Server"
      set_fact:
        tower_jobid: "246"
      when: jobname == "satellite"

    - name: "Set fact for Tower Server"
      set_fact:
        tower_jobid: "295"
      when: jobname == "tower"

    - name: "Openstack Blocks"
      block:
        - name: "OSP8 Block"
          block:
            - name: "Create VM in Openstack 8"
              shell: |
                OSID=$(hammer --csv os list | grep '{{ operatingsystem }}' | awk -F, {'print $1'})
                COMPUTEID=$(hammer --csv compute-resource list | grep '{{ osp8_resource }}' | awk -F, {'print $1'})
                IMAGEID=$(hammer --csv compute-resource image list --compute-resource-id ${COMPUTEID} | grep '{{ vmimage }}' | awk -F, {'print $1'})
                hammer host create --operatingsystem-id ${OSID} --name "{{ vmname }}" --organization "{{ sat6_org }}" \
                --location "{{ sat6_location }}" --hostgroup "{{ sat6_hostgroup }}" \
                --compute-resource "{{ osp8_resource }}" --provision-method image \
                --image-id "${IMAGEID}" --enabled true --managed true \
                --interface "managed=true,primary=true,provision=true"
              register: vmprovider

            - name: "Set some meta data about the vm for cloud-init"
              command: hammer host set-parameter --host {{ vmname }} --name {{ item.name }} --value "{{ item.value }}"
              with_items:
                - "{{ vmmetadata }}"
          when: provider == "OSP8"

        - name: "OSP10 Block"
          block:
            - name: "Create VM in Openstack 10"
              shell: |
                set -x
                OSID=$(hammer --csv os list | grep '{{ operatingsystem }}' | awk -F, {'print $1'})
                COMPUTEID=$(hammer --csv compute-resource list | grep '{{ osp10_resource }}' | awk -F, {'print $1'})
                IMAGEID=$(hammer --csv compute-resource image list --compute-resource-id ${COMPUTEID} | grep '{{ vmimage }}' | awk -F, {'print $1'})
                IMAGEUUID=$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@{{ osp10_controller }} "source keystonerc_dtaylor ; glance image-list | grep '{{ vmimage }}' | cut -f2 -d\| | xargs")
                SUBNETUUID=$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@{{ osp10_controller }} "source keystonerc_dtaylor ; neutron subnet-list | grep {{ osp10_subnet }} | cut -f2 -d\| | xargs")
                TENANTUUID=$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@{{ osp10_controller }} "source keystonerc_dtaylor ; openstack project list | grep '{{ sat6_org }}' | cut -f2 -d\| | xargs")
                #hammer host create --operatingsystem-id ${OSID} --name "{{ vmname }}" --organization "{{ sat6_org }}" \
                #--location "{{ sat6_location }}" --hostgroup "{{ sat6_hostgroup }}" \
                #--compute-resource "{{ osp10_resource }}" --provision-method image \
                #--image-id "${IMAGEID}" --enabled true --managed true \
                #--interface "managed=true,primary=true,provision=true"
                hammer host create --operatingsystem-id ${OSID} --name '{{ vmname }}' --organization '{{ sat6_org }}' \
                --location {{ sat6_location }} --hostgroup '{{ sat6_hostgroup }}' \
                --compute-resource '{{ osp10_resource }}' --provision-method image --enabled true --managed true \
                --interface managed=true,primary=true,provision=true --lifecycle-environment "Development" \
                --content-view "Base"  --root-pass {{ vmrootpassword }} \
                --compute-attributes nics=["$(ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null root@{{ osp10_controller }} "source keystonerc_dtaylor ; neutron subnet-show ${SUBNETUUID} | grep network_id | cut -d\|  -f3 | xargs")"],flavor_ref=3,image_ref=${IMAGEUUID},tenant_id=${TENANTUUID},security_groups={{ osp10_sg }} \
                --parameters tower_jobid={{ tower_jobid }},tower_server={{ tower_server }},tower_key={{tower_key }}
              register: vmprovider
              become: true
              ignore_errors: yes

#            - name: "Pause to wait for host to be created"
#              pause:
#                minutes: 1

            - name: "Set some meta data about the vm for cloud-init"
              command: hammer host set-parameter --host "{{ vmname }}.{{ dns_domain }}" --name {{ item.name }} --value "{{ item.value }}"
              with_items:
                - "{{ vmmetadata }}"
                - name: tower_jobid
                  value: "{{ tower_jobid }}"
          when: provider == "OSP10"
      when: provider == "OSP10" or provider == "OSP8"

    - name: "AWS Block"
      block:
        - name: "Create VM in AWS"
          shell: |
            hammer host create --name "{{ vmname }}" --organization "{{ sat6_org }}" \
            --location "{{ sat6_location }}" --hostgroup "{{ sat6_hostgroup }}" \
            --compute-resource "{{ aws_resource }}" --provision-method image \
            --image "{{ vmimage }}" --enabled true --managed true \
            --interface "managed=true,primary=true,provision=true" \
            --computeattributes="flavor_ref=1" --operatingsystem-id ${OSID}
          register: vmprovider
        - name: "Set some meta data about the vm for cloud-init"
          command: hammer host set-parameter --host {{ vmname }} --name {{ item.name }} --value "{{ item.value }}"
          with_items:
            - "{{ vmmetadata }}"
            - name: tower_jobid
              value: "{{ tower_jobid }}"
      when: provider == "AWS"

    - name: "RHEV Block"
      block:
        - name: "Create VM in RHEV"
          shell: |
            hammer host create --name "{{ vmname }}" --organization "{{ sat6_org }}" \
            --location "{{ sat6_location }}" --hostgroup "{{ sat6_hostgroup }}" \
            --compute-resource "{{ rhev_resource }}" --provision-method image \
            --image "{{ vmimage }}" --enabled true --managed true \
            --interface "managed=true,primary=true,provision=true" \
            --computeattributes="flavor_ref=1"  --operatingsystem-id ${OSID}
          register: vmprovider

        - name: "Set some meta data about the vm for cloud-init"
          command: hammer host set-parameter --host {{ vmname }} --name {{ item.name }} --value "{{ item.value }}"
          with_items:
            - "{{ vmmetadata }}"
            - name: tower_jobid
              value: "{{ tower_jobid }}"
      when: provider == "RHEV"
    
     
    - name: Show Server's IP
      debug: var=vmprovider.stdout

    - name: "update all the ansible tower osp10 repos"
      shell: |
        curl --ciphers ecdhe_rsa_aes_128_gcm_sha_256 -f -k \
        -H 'Content-Type: application/json' -XPOST \
        --user admin:ansible \
        https://10.55.102.248/api/v1/inventory_sources/{{ item }}/update/
        sleep 5
      with_items:
        - 226
        - 1141
        - 349
        - 310
        - 719
        - 720
      ignore_errors: yes
