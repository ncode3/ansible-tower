<%#
kind: user_data
name: Satellite Kickstart default user data
oses:
- CentOS 6
- CentOS 7
- Fedora 19
- Fedora 20
- Fedora 21
- Fedora 22
- Fedora 23
-%>
#cloud-config
hostname: <%= @host.shortname %>
fqdn: <%= @host %>
manage_etc_hosts: true
system_info:
  default_user:
    name: cloud-user
groups:
 - admin
 - cloud-user

users:
 - default
 - name: admin
   primary-group: admin
   groups: users
   shell: /bin/bash
   sudo: ['ALL=(ALL) ALL']
   lock-passwd: false
   passwd: <%= @host.root_pass %>
<%# Allow user to specify additional SSH key as host paramter -%>
<% if @host.params['sshkey'].present? || @host.params['remote_execution_ssh_keys'].present? -%>
   ssh_authorized_keys:
<% if @host.params['sshkey'].present? -%>
   - <%= @host.params['sshkey'] %>
<% end -%>
<% if @host.params['remote_execution_ssh_keys'].present? -%>
<% @host.params['remote_execution_ssh_keys'].each do |key| -%>
   - <%= key %>
<% end -%>
<% end -%>
<% end -%>
 - name: cloud-user
   primary-group: cloud-user
   groups: wheel
   shell: /bin/bash
   sudo: ['ALL=(ALL) NOPASSWD:ALL']
   lock-passwd: false
   passwd: <%= @host.root_pass %>
<%# Allow user to specify additional SSH key as host paramter -%>
<% if @host.params['sshkey'].present? || @host.params['remote_execution_ssh_keys'].present? -%>
   ssh_authorized_keys:
<% if @host.params['sshkey'].present? -%>
   - <%= @host.params['sshkey'] %>
<% end -%>
<% if @host.params['remote_execution_ssh_keys'].present? -%>
<% @host.params['remote_execution_ssh_keys'].each do |key| -%>
   - <%= key %>
<% end -%>
<% end -%>
<% end -%>

write_files:
- path: /etc/sudoers.d/999-cloud-user
  permissions: '0440'
  content: |
    Defaults:cloud-user !requiretty
- path: /tmp/foreman-userdata.sh
  permissions: '0755'
  content: |
    #!/bin/bash
<%= indent 4 do
      snippet 'subscription_manager_registration'
    end %>
<% if @host.info['parameters']['realm'] && @host.realm && @host.realm.realm_type == 'Red Hat Identity Management' -%>
<%= indent 4 do
      snippet 'idm_register'
    end %>
<% end -%>
  <% unless @host.operatingsystem.atomic? -%>
    # update all the base packages from the updates repository
    yum -t -y -e 0 update
  <% end -%>
<%
  # safemode renderer does not support unary negation
  non_atomic = @host.operatingsystem.atomic? ? false : true
  pm_set = @host.puppetmaster.empty? ? false : true
  puppet_enabled = non_atomic && (pm_set || @host.params['force-puppet'])
  salt_enabled = non_atomic && (@host.params['salt_master'] ? true : false)
%>
<% if salt_enabled %>
    yum -t -y -e 0 install salt-minion
    cat > /etc/salt/minion << EOF
    <%= indent 4 do
          snippet 'saltstack_minion'
        end %>
    EOF
    # Setup salt-minion to run on system reboot
    /sbin/chkconfig --level 345 salt-minion on
    # Running salt-call to trigger key signing
    salt-call --no-color --grains >/dev/null
<% end -%>
<% if puppet_enabled %>
    yum install -y puppet
    cat > /etc/puppet/puppet.conf << EOF
    <%= indent 4 do
          snippet 'puppet.conf'
        end %>
    EOF
    # Setup puppet to run on system reboot
    /sbin/chkconfig --level 345 puppet on

    /usr/bin/puppet agent --config /etc/puppet/puppet.conf --onetime --tags no_such_tag <%= @host.puppetmaster.blank? ? '' : "--server #{@host.puppetmaster}" %> --no-daemonize
    /sbin/service puppet start
<% end -%>
   ## ansible tower callback
<% if @host.params['tower_key'].present? && @host.params['tower_server'].present? && @host.params['tower_jobid'].present? -%>
    curl -k --data 'host_config_key=<%= @host.params['tower_key'] %>' https://<%= @host.params['tower_server'] %>:443/api/v1/job_templates/<%= @host.params['tower_jobid'] %>/callback/
<% else -%>
    curl -k --data 'host_config_key=dc7c0b52cd29cacceb8d3571257801ea' https://10.55.102.248:443/api/v1/job_templates/287/callback/
<% end -%>
phone_home:
 url: <%= foreman_url('built') %>
 post: []
 tries: 10
runcmd:
 - [ cloud-init-per, once, foreman-userdata, /tmp/foreman-userdata.sh ]
output: {all: '| tee -a /root/install.userdata.log'}

