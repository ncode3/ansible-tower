---
# Creates a new instance with provisioning userdata using Cloud-Init
- name: launch a demo instance in ec2
  hosts: localhost
  gather_facts: no
  vars:
    host_config_key: firstboot
    host_config_server: "{{ default_tower_server }}"
    host_config_jobid: "14"
    aws_security_group_id: "sg-639a7212"
    aws_security_group: "Redhat_Lab-sg-public"
    aws_region: us-east-1
    aws_number_of_vms: 1
    centos7_ami: ami-6d1c2007
    aws_instance_tags:
      Name: RHEL Ansible Demo VM
    aws_instance_private_tags:
      Name: Private RHEL Ansible Demo VM
    aws_instance_public_tags:
      Name: Public RHEL Ansible Demo VM
  environment:
    AWS_ACCESS_KEY_ID: "{{ AWS_ACCESS_KEY_ID }}"
    AWS_SECRET_KEY: "{{ AWS_SECRET_KEY }}"
  tasks:
    - name: launch an ec2 instance in an isolated network
      when: aws_vpc_subnet_id is defined
      ignore_errors: yes
      ec2:
        key_name: "{{ aws_key_name }}"
        instance_type: "{{ aws_instance_type }}"
        image: "{{ aws_image_ami }}"
        wait: yes
        group: "{{ aws_security_group }}"
        #group: "{{ aws_security_group_id }}"
        count: "{{ aws_number_of_vms }}"
        vpc_subnet_id:  "{{ aws_vpc_subnet_id }}"
        assign_public_ip: "{{ aws_assign_public_ip }}"
        region: "{{ aws_region }}"
        instance_tags: "{{ aws_instance_tags }}"
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: "{{ aws_volume_size }}"
            delete_on_termination: true
        user_data: |
          #cloud-config
          # for reference:
          # http://cloudinit.readthedocs.org/en/latest/topics/examples.html
          # https://access.redhat.com/articles/rhel-atomic-cloud-init-faq
          preserve_hostname: false
          yum_repos:
            epel:
              mirrorlist: https://mirrors.fedoraproject.org/metalink?repo=epel-7&arch=x86_64
              enabled: true
              name: Extra Packages for Enterprise Linux 7 - x86_64
              gpgcheck: false
          system_info:
            default_user:
              name: cloud-user
          groups:
            - cloud-user
          users:
            - name: cloud-user
              primary-group: cloud-user
              groups: wheel
              se-linux-user: unconfined_u
              #ssh_pwauth: true
              lock-passwd: false
              sudo: ALL=(ALL) NOPASSWD:ALL
              ssh-authorized-keys:
                - "{{ cloud_user_pub_key }}"
            - name: root
              #ssh_pwauth: true
              lock-passwd: false
              expire: false
          ssh_pwauth: true
          chpasswd:
            list: |
              root:redhat123
          #    cloud-user:redhat123
          write_files:
            - path: /etc/sudoers.d/999-cloud-user
              permissions: '0440'
              content: |
                Defaults:cloud-user !requiretty
          runcmd:
           # this is post configuration job template
           - "curl -k --data 'host_config_key={{ host_config_key }}' https://{{ host_config_server }}:443/api/v2/job_templates/{{ host_config_jobid }}/callback/"

    - name: launch an ec2 instance in a public vpc
      when: aws_vpc_subnet_publicid is defined
      ignore_errors: yes
      ec2:
        key_name: "{{ aws_key_name }}"
        instance_type: "{{ aws_instance_type }}"
        image: "{{ aws_image_ami }}"
        wait: yes
        group: "{{ aws_security_public_group }}"
        #group: "{{ aws_security_group_id }}"
        count: "{{ aws_number_of_vms }}"
        vpc_subnet_id:  "{{ aws_vpc_subnet_publicid }}"
        assign_public_ip: yes
        region: "{{ aws_region }}"
        instance_tags: "{{ aws_instance_public_tags }}"
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: "{{ aws_volume_size }}"
            delete_on_termination: true
        user_data: |
          #cloud-config
          # for reference:
          # http://cloudinit.readthedocs.org/en/latest/topics/examples.html
          # https://access.redhat.com/articles/rhel-atomic-cloud-init-faq
          preserve_hostname: false
          yum_repos:
            epel:
              mirrorlist: https://mirrors.fedoraproject.org/metalink?repo=epel-7&arch=x86_64
              enabled: true
              name: Extra Packages for Enterprise Linux 7 - x86_64
              gpgcheck: false
          system_info:
            default_user:
              name: cloud-user
          groups:
            - cloud-user
          users:
            - name: cloud-user
              primary-group: cloud-user
              groups: wheel
              se-linux-user: unconfined_u
              #ssh_pwauth: true
              lock-passwd: false
              sudo: ALL=(ALL) NOPASSWD:ALL
              ssh-authorized-keys:
                - "{{ cloud_user_pub_key }}"
            - name: root
              ssh_pwauth: true
              lock-passwd: false
              expire: false
          ssh_pwauth: true
          chpasswd:
            list: |
              root:redhat123
          #    cloud-user:redhat123
          write_files:
          - path: /tmp/firstboot.sh
            permissions: '0755'
            owner: root:root
            content: |
              #!/bin/bash
              # managed by cloud-config
              # this exists to give aws networking time to come up before phoning home
              if [ -d /var/log/firstboot ]
              then
                 echo "*** firstboot.sh already run"
                 echo "*** firstboot.sh delete /var/log/firstboot to run again"
                 exit 0
              fi
              sleep 60
              curl -k --data 'host_config_key={{ host_config_key }}' https://{{ host_config_server }}:443/api/v2/job_templates/{{ host_config_jobid }}/callback/
          runcmd:
           # this is post configuration job template
           - /tmp/firstboot.sh

    - name: launch an ec2 instance in a private network
      when: aws_vpc_subnet_privateid is defined
      ignore_errors: yes
      ec2:
        key_name: "{{ aws_key_name }}"
        instance_type: "{{ aws_instance_type }}"
        image: "{{ aws_image_ami }}"
        wait: yes
        group: "{{ aws_security_private_group }}"
        #group: "{{ aws_security_group_id }}"
        count: "{{ aws_number_of_vms }}"
        vpc_subnet_id:  "{{ aws_vpc_subnet_privateid }}"
        #assign_public_ip: yes
        region: "{{ aws_region }}"
        instance_tags: "{{ aws_instance_private_tags }}"
        volumes:
          - device_name: /dev/sda1
            volume_type: gp2
            volume_size: "{{ aws_volume_size }}"
            delete_on_termination: true
        user_data: |
          #cloud-config
          # for reference:
          # http://cloudinit.readthedocs.org/en/latest/topics/examples.html
          # https://access.redhat.com/articles/rhel-atomic-cloud-init-faq
          preserve_hostname: false
          yum_repos:
            epel:
              mirrorlist: https://mirrors.fedoraproject.org/metalink?repo=epel-7&arch=x86_64
              enabled: true
              name: Extra Packages for Enterprise Linux 7 - x86_64
              gpgcheck: false
          system_info:
            default_user:
              name: cloud-user
          groups:
            - cloud-user
          users:
            - name: cloud-user
              primary-group: cloud-user
              groups: wheel
              se-linux-user: unconfined_u
              #ssh_pwauth: true
              lock-passwd: false
              sudo: ALL=(ALL) NOPASSWD:ALL
              ssh-authorized-keys:
                - "{{ cloud_user_pub_key }}"
            - name: root
              ssh_pwauth: true
              lock-passwd: false
              expire: false
          ssh_pwauth: true
          chpasswd:
            list: |
              root:redhat123
          #    cloud-user:redhat123
          runcmd:
           # this is post configuration job template
           - "curl -k --data 'host_config_key={{ host_config_key }}' https://{{ host_config_server }}:443/api/v2/job_templates/{{ host_config_jobid }}/callback/"

