---
- name: "Customize OSP 10 -  create networks, projects, users, and import glance images from nfs share"
  hosts: 10.55.102.158
  vars:
    openstack:
      project_name: Redhat_Lab
      project_user: dtaylor
      project_pass: redhat123
      dns_server: 10.55.102.5
      dhcp_server: 10.55.102.5
      dhcp_domain: stack.openstack.com
      dhcp_mtu: 1454
      hugepages:
        use: "yes"
        device: /dev/sda
      glance:
        mount_nfs: "yes"
        import: "yes"
        image_path: /mnt/compute1/glance-images
        nfs_target: 10.55.2.155:/mnt/drobo/software/BackUp/openstack/glance-images
        image_names: ['PXE-client-bare.raw','cfme-rhos-5.8.0.17-1.x86_64.qcow2','RHEL-7.3-Cloud-bare.qcow2','RHEL-Atomic-7.2.6-1-bare.qcow2','QCI-Template-bare.qcow2']
      networks:
        Provisioning_102:
          cidr: 10.55.102.0/24
          vlanid: 102
          subnet_name: NET102
          dhcp_start: 10.55.102.200
          dhcp_end: 10.55.102.225
          gateway: 10.55.102.1
        Storage_105:
          cidr: 10.55.105.0/24
          vlanid: 105
          subnet_name: NET105
          dhcp_start: 10.55.105.200
          dhcp_end: 10.55.105.225
          gateway: 10.55.105.1
  tasks:
    - name: "Check if project exists"
      shell: |
        . /root/keystonerc_admin
        openstack project list | grep {{ openstack['project_name'] }}
      ignore_errors: yes
      register: proj_stat
    
    - name: "Create lab project and user"
      shell: |
        . /root/keystonerc_admin
        openstack project create --description "{{ openstack['project_name'] }}" {{ openstack['project_name'] }}
        openstack user create --project {{ openstack['project_name'] }} --password {{ openstack['project_pass'] }} {{ openstack['project_user'] }}
      args:
        chdir: /root
      become: true
      ignore_errors: yes
      when: openstack['project_name'] not in proj_stat.stdout

    - name: "copy over {{ openstack['project_user'] }} keystone file"
      template:
        src: "openstack/keystonerc_{{ openstack['project_user'] }}.j2"
        dest: "/root/keystonerc_{{ openstack['project_user'] }}"
        owner: root
        group: root
        mode: 0644

    - name: "copy over glance import script"
      template:
        src: openstack/glance-import.sh.j2
        dest: /root/glance-import.sh
        owner: root
        group: root
        mode: 0755
      when: openstack['glance']['import']  == "yes"
        
    - name: "make the import directory"
      file:
        path: "{{ openstack['glance']['image_path'] }}"
        state: directory
        owner: root
        group: root
        mode: 0755
      when: openstack['glance']['import']  == "yes"

    - name: copy over dns script  used by openstack dnsmasq to update the vm's dns entry
      template:
        src: openstack/dns-updater.sh.j2
        dest: /usr/local/bin/dns-updater.sh
        owner: root
        group: root
        mode: 0755

    - name: openstack dnsmasq config file to use the dns script and custom mtu settings etc
      template:
        src: openstack/dnsmasq.conf.j2
        dest: /etc/neutron/dnsmasq.conf
        owner: root
        group: root
        mode: 0644

    - name: update neutron dhcp_agent.ini dns values
      lineinfile: 
        line: "dnsmasq_dns_servers = {{ openstack['dns_server'] }}"
        dest: /etc/neutron/dhcp_agent.ini
        regexp: "^dnsmasq_dns_servers =*"
        state: present

    - name: update neutron dhcp_agent.ini domain values
      lineinfile: 
        line: "dhcp_domain = {{ openstack['dhcp_domain'] }}"
        dest: /etc/neutron/dhcp_agent.ini
        regexp: "^dhcp_domain =*"
        state: present

    - name: update neutron neutron.conf domain values
      lineinfile: 
        line: "dns_domain = {{ openstack['dhcp_domain'] }}"
        dest: /etc/neutron/neutron.conf
        regexp: "^dns_domain =*"
        state: present

    - name: update nova.conf domain values
      lineinfile:
        line: "dhcp_domain={{ openstack['dhcp_domain'] }}"
        dest: /etc/nova/nova.conf
        regexp: "^dhcp_domain=*"
        state: present

    - name: update neutron dhcp_agent.ini to use dnsmasq config file
      lineinfile:
        dest: /etc/neutron/dhcp_agent.ini
        line: "dnsmasq_config_file = /etc/neutron/dnsmasq.conf"
        regexp: "^dnsmasq_config_file =*"
        state: present

    - name: update neutron dhcp_agent.ini isolated network values so cloud-init will work when not using a neutron router
      lineinfile:
        line: "enable_isolated_metadata = True"
        dest: /etc/neutron/dhcp_agent.ini
        regexp: "^enable_isolated_metadata = False"
        state: present

    - name: "killing dnsmasq"
      command: killall dnsmasq
      become: true
      ignore_errors: yes


    - name: "Enabling and restarting services openstack nova and neutron-dhcp-agent services"
      service:
        name: "{{ item }}"
        state: restarted
        enabled: yes
      with_items:
        - neutron-dhcp-agent
        - openstack-nova-api
        - openstack-nova-cert
        - openstack-nova-consoleauth
        - openstack-nova-scheduler
        - openstack-nova-conductor
        - openstack-nova-novncproxy 
      become: true

    - name: "Mount nfs share to import glance images"
      mount:
        path: "{{ openstack['glance']['image_path'] }}"
        src: "{{ openstack['glance']['nfs_target'] }}"
        fstype: nfs
        opts: noauto,x-systemd.automount,x-systemd.device-timeout=10,timeo=14,x-systemd.idle-timeout=1min
        state: present
      when: openstack['glance']['mount_nfs']  == "yes"

    - name: "Ensure nfs is mounted"
      shell: |
        mount {{ openstack['glance']['image_path'] }}
      args:
        chdir: /root
      become: true
      when: openstack['glance']['mount_nfs']  == "yes"
      ignore_errors: yes

    - name: "Import a couple of glance images ..."
      shell: |
        . /root/keystonerc_admin
        NAME=$(grep -v "_type_name" {{ openstack['glance']['image_path'] }}/{{ item }}.metadata | grep name |  cut -d\| -f3| sed -e 's/^ *//' -e 's/ *$//')
        openstack image list | grep "${NAME}" || /root/glance-import.sh  -f {{ openstack['glance']['image_path'] }}/{{ item }}
        #/root/glance-import.sh  -f {{ openstack['glance']['image_path'] }}/{{ item }}
      args:
        chdir: /root
      become: true
      with_items: "{{ openstack['glance']['image_names'] }}"
      when: openstack['glance']['import'] == "yes"
      ignore_errors: yes

    - name: "Create the networks and subnets ..."
      shell: |
        . /root/keystonerc_admin
        projectid=$(openstack project list | grep {{ openstack['project_name'] }} | awk '{print $2}')
        neutron net-list | grep "{{ item.key }}" || \
        ( neutron net-create {{ item.key }} --provider:network_type vlan --provider:physical_network inter-vlan --provider:segmentation_id {{ item.value.vlanid }} --tenant-id=$projectid && \
        neutron subnet-create {{ item.key }} {{ item.value.cidr }} --gateway {{ item.value.gateway }} --name "{{ item.value.subnet_name }}" --allocation-pool start={{ item.value.dhcp_start }},end={{ item.value.dhcp_end }} --tenant-id=$projectid --dns-nameserver {{ openstack['dns_server'] }} )
      args:
        chdir: /root
      become: true
      with_dict: "{{ openstack['networks'] }}"
      ignore_errors: yes

    - name: "Create the security groups ..."
      shell: |
        . /root/keystonerc_{{ openstack['project_user'] }}
        openstack keypair create --public-key ~/.ssh/id_rsa.pub {{ openstack['project_user'] }}-openstack
        openstack security group create {{ openstack['project_name'] }}-sg --description "{{ openstack['project_name'] }} Security Group"
        openstack security group rule create --protocol icmp {{ openstack['project_name'] }}-sg
        openstack security group rule create --protocol tcp {{ openstack['project_name'] }}-sg
        openstack security group rule create --protocol udp {{ openstack['project_name'] }}-sg
      args:
        chdir: /root
      become: true
      ignore_errors: yes

    - name: "Configure the system for Huge Pages"
      shell: |
        grubby --update-kernel=ALL --args="hugepagesz=2M hugepages=2048"
        grub2-install {{ openstack['hugepages']['device'] }}
      args:
        chdir: /root
      become: true
      when: openstack['hugepages']['use']  == "yes"
      ignore_errors: yes

    - name: "Create the flavors for huge pages ..."
      shell: |
        source /root/keystonerc_admin
        nova flavor-create m1.medium.performance 6 4096 20 4
        nova flavor-key m1.medium.performance set hw:mem_page_size=2048
      args:
        chdir: /root
      become: true
      when: openstack['hugepages']['use']  == "yes"
      ignore_errors: yes

    - name: "Update Nova Scheduler to filter on capabilities  ..."
      shell: |
        sed -i -e 's/^scheduler_default_filters=RetryFilter,AvailabilityZoneFilter,RamFilter,DiskFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter,CoreFilter/scheduler_default_filters=RetryFilter,AvailabilityZoneFilter,RamFilter,DiskFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter,CoreFilter,NUMATopologyFilter,AggregateInstanceExtraSpecsFilter/g' /etc/nova/nova.conf
        systemctl restart openstack-nova-scheduler.service
      args:
        chdir: /root
      become: true
      when: openstack['hugepages']['use']  == "yes"
      ignore_errors: yes

    - name: "Creating firstboot script to launch demos"
      shell: |
        cat > /etc/systemd/system/firstboot-setup.service <<EOF
        [Unit]
        Description=Calls Ansible Tower Firstboot Script
        After=network.target
        
        [Service]
        Type=oneshot
        ExecStart=/opt/firstboot-start.sh
        RemainAfterExit=true
        ExecStop=/opt/firstboot-stop.sh
        StandardOutput=journal
        
        [Install]
        WantedBy=multi-user.target
        EOF
        
        cat > /opt/firstboot-start.sh <<EOF
        #!/bin/bash
        sleep 60
        echo "OSE 3.5 launch job"
        curl -f -k -H 'Content-Type: application/json' -XPOST --user admin:ansible https://10.55.102.248:443/api/v1/job_templates/258/launch/
        echo "Sat 6 launch job"
        curl -f -k -H 'Content-Type: application/json' -XPOST --user admin:ansible https://10.55.102.248:443/api/v1/job_templates/259/launch/
        echo "CMFE launch job"
        curl -f -k -H 'Content-Type: application/json' -XPOST --user admin:ansible https://10.55.102.248:443/api/v1/job_templates/260/launch/

        EOF
        
        cat > /opt/firstboot-stop.sh <<EOF
        #!/bin/bash
        echo "Removing firstboot service ..."
        systemctl disable firstboot-setup
        rm -f /etc/systemd/system/firstboot-setup.service
        rm -f /opt/firstboot-start.sh /opt/firstboot-stop.sh
        systemctl daemon-reload
      args:
        chdir: /root
      become: true
      when: openstack['hugepages']['use']  == "yes"

    - name: "Reboot to new settings. Back in 10 mins or so"
      shell: |
        shutdown -r +2 && sleep 2
      args:
        chdir: /root
      become: true
      when: openstack['hugepages']['use']  == "yes"

    - name: "Launching demos"
      shell: |
        echo "OSE 3.5 launch job"
        curl -f -k -H 'Content-Type: application/json' -XPOST --user admin:ansible https://10.55.102.248:443/api/v1/job_templates/258/launch/
        echo "Sat 6 launch job"
        curl -f -k -H 'Content-Type: application/json' -XPOST --user admin:ansible https://10.55.102.248:443/api/v1/job_templates/259/launch/
        echo "CMFE launch job"
        curl -f -k -H 'Content-Type: application/json' -XPOST --user admin:ansible https://10.55.102.248:443/api/v1/job_templates/260/launch/
      args:
        chdir: /root
      become: true
      when: openstack['hugepages']['use']  == "no"




## Configure compute nodes for hugepages
- name: "Install OSE 3.5"
  hosts: 10.55.102.156,10.55.102.157
  tasks:
    - name: "Configure the system for Huge Pages"
      shell: |
        grubby --update-kernel=ALL --args="hugepagesz=2M hugepages=2048"
        grub2-install {{ openstack['hugepages']['device'] }}
      args:
        chdir: /root
      become: true
      when: openstack['hugepages']['use']  == "yes"
      ignore_errors: yes

    - name: "Update Nova Scheduler to filter on capabilities  ..."
      shell: |
        sed -i -e 's/^scheduler_default_filters=RetryFilter,AvailabilityZoneFilter,RamFilter,DiskFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter,CoreFilter/scheduler_default_filters=RetryFilter,AvailabilityZoneFilter,RamFilter,DiskFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,ServerGroupAntiAffinityFilter,ServerGroupAffinityFilter,CoreFilter,NUMATopologyFilter,AggregateInstanceExtraSpecsFilter/g' /etc/nova/nova.conf
        systemctl restart openstack-nova-compute.service
      args:
        chdir: /root
      become: true
      when: openstack['hugepages']['use']  == "yes"
      ignore_errors: yes

    - name: "Reboot to new settings. Back in 10 mins or so"
      shell: |
        shutdown -r +1 && sleep 2
      args:
        chdir: /root
      become: true
      when: openstack['hugepages']['use']  == "yes"

